import { Button, Checkbox, InputNumber } from 'antd'
import { AuthContext } from 'context/auth.context'
import { CartContext } from 'context/cart.context'
import { Decimal } from 'decimal.js'
import { CartItem } from 'dto/cart.dto'
import _ from 'lodash'
import { GetServerSideProps } from 'next'
import { useTranslation } from 'next-i18next'
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { useRouter } from 'next/router'
import React, { useContext, useEffect, useMemo } from 'react'
import auth from 'services/auth'
import { cart } from 'services/cart'
import { groupCartItemByVendor } from 'utils/common'
import { handleApiError } from 'utils/error'
import { Delete24Regular } from '@fluentui/react-icons'

const CartPage: React.FC<any> = () => {
  const { t } = useTranslation('common')
  const cartCtx = useContext(CartContext)
  const authCtx = useContext(AuthContext)
  const router = useRouter()
  const cartItemsGroupByVendor = useMemo(() => {
    return groupCartItemByVendor(cartCtx.cartItems)
  }, [cartCtx.cartItems])

  useEffect(() => {
    if (auth.initialized && !authCtx.user) {
      router.push('/auth/signin')
    }
  }, [authCtx.user, router])

  function setCartItemQuantity(c: CartItem, quantity: number) {
    cart
      .setCartItemQuantity({
        productId: c.productId,
        quantity,
      })
      .then(() => {
        cartCtx.refreshCart()
      })
      .catch((error) => {
        handleApiError(t, error)
      })
  }

  function handleDeleteCartItem(e: any, cartItem: CartItem) {
    e.preventDefault()
    cart
      .deleteCartItem(cartItem)
      .then(() => {
        cartCtx.refreshCart()
      })
      .catch((error) => {
        handleApiError(t, error)
      })
  }

  return (
    <div className="p-8">
      <Head>
        <title>Order Management System | Product List</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className="text-5xl mb-4 text-center">{t('title_cart')}</h1>
      <main className="flex flex-col justify-start items-center min-h-screen p-16">
        <div className="flex justify-start min-w-full max-w-full">
          <div className="flex flex-col justify-center my-6 min-w-full">
            {cartCtx.cartItems.length === 0 && (
              <>
                <div className="text-center text-lg">
                  {t('cart_empty_text')}
                </div>
                <Link href="/products">
                  <Button type="link">{t('shop_now_text')}</Button>
                </Link>
              </>
            )}
            {cartCtx.cartItems.length > 0 && (
              <div className="flex flex-col w-full p-8 text-gray-800 bg-white shadow-lg pin-r pin-y">
                <div className="flex-1">
                  <table
                    className="w-full text-sm lg:text-base"
                    cellSpacing="0"
                  >
                    <thead>
                      <tr className="h-12 uppercase">
                        <th className="table-cell w-2"></th>
                        <th className="table-cell w-40"></th>
                        <th className="text-left">Product</th>
                        <th className="text-center">
                          <span>Quantity</span>
                        </th>
                        <th className="text-right table-cell">Unit price</th>
                        <th className="text-right">Total price</th>
                        <th className="text-right w-20"></th>
                      </tr>
                    </thead>
                    <tbody>
                      {Object.values(cartItemsGroupByVendor).map((vendor) => {
                        return (
                          <>
                            <tr>
                              <td colSpan={7}>
                                <div className="bg-gray-200 px-4 py-2">
                                  {vendor.vendorName}
                                </div>
                              </td>
                            </tr>
                            {vendor.items.map((item) => {
                              return (
                                <tr key={`${item.productId}-${item}`}>
                                  <td className="pb-4 table-cell">
                                    <Checkbox
                                      onChange={() =>
                                        cartCtx.toggleCheckoutItem(item)
                                      }
                                    />
                                  </td>
                                  <td className=" pb-4 table-cell">
                                    <Image
                                      src="/images/default-product-image.png"
                                      width={160}
                                      height={160}
                                      alt={item.productName}
                                    />
                                  </td>
                                  <td>
                                    <a href="#">{item.productName}</a>
                                  </td>
                                  <td className="text-center mt-6">
                                    <div className="w-20 h-10 inline-block">
                                      <div className="relative flex flex-row w-full h-8">
                                        <InputNumber
                                          type="number"
                                          value={item.quantity}
                                          onChange={_.debounce(
                                            (quantity) =>
                                              setCartItemQuantity(
                                                item,
                                                quantity
                                              ),
                                            200
                                          )}
                                          min={1}
                                          className="w-full font-semibold text-center text-gray-700 outline-none focus:outline-none hover:text-black focus:text-black"
                                        />
                                      </div>
                                    </div>
                                  </td>
                                  <td className="text-right table-cell">
                                    <span className="text-sm lg:text-base font-medium">
                                      {item.productPrice}
                                    </span>
                                  </td>
                                  <td className="text-right">
                                    <span className="text-sm lg:text-base font-medium">
                                      {new Decimal(item.productPrice)
                                        .times(item.quantity)
                                        .toFixed(2)}
                                    </span>
                                  </td>
                                  <td className="text-center">
                                    <a
                                      onClick={(e) =>
                                        handleDeleteCartItem(e, item)
                                      }
                                    >
                                      <Delete24Regular />
                                    </a>
                                  </td>
                                </tr>
                              )
                            })}
                          </>
                        )
                      })}
                    </tbody>
                  </table>
                  <div className="my-4 mt-6 -mx-2 lg:flex">
                    <div className="lg:px-2 lg:w-1/2">
                      <div className="p-4 bg-gray-100 rounded-full">
                        <h1 className="text-lg mb-0 font-bold uppercase">
                          Order Details
                        </h1>
                      </div>
                      <div className="p-4">
                        <div className="flex justify-between border-b">
                          <div className="lg:px-4 lg:py-2 m-2 text-lg lg:text-xl font-bold text-center text-gray-800">
                            {t('cart_order_total_text')}
                          </div>
                          <div className="lg:px-4 lg:py-2 m-2 lg:text-lg font-bold text-center text-gray-900">
                            {cartCtx.checkoutItems
                              .reduce(
                                (s, i) =>
                                  new Decimal(i.quantity)
                                    .times(new Decimal(i.productPrice))
                                    .plus(s),
                                new Decimal(0)
                              )
                              .toFixed(2)}
                          </div>
                        </div>
                        <Link href="/checkout">
                          <Button
                            type="primary"
                            size="large"
                            className="flex justify-center items-center w-full px-10 py-3 mt-6 font-medium uppercase rounded-full shadow item-center hover:bg-gray-700 focus:shadow-outline focus:outline-none"
                          >
                            <svg
                              aria-hidden="true"
                              data-prefix="far"
                              data-icon="credit-card"
                              className="w-8 flex"
                              xmlns="http://www.w3.org/2000/svg"
                              viewBox="0 0 576 512"
                            >
                              <path
                                fill="currentColor"
                                d="M527.9 32H48.1C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48.1 48h479.8c26.6 0 48.1-21.5 48.1-48V80c0-26.5-21.5-48-48.1-48zM54.1 80h467.8c3.3 0 6 2.7 6 6v42H48.1V86c0-3.3 2.7-6 6-6zm467.8 352H54.1c-3.3 0-6-2.7-6-6V256h479.8v170c0 3.3-2.7 6-6 6zM192 332v40c0 6.6-5.4 12-12 12h-72c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h72c6.6 0 12 5.4 12 12zm192 0v40c0 6.6-5.4 12-12 12H236c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h136c6.6 0 12 5.4 12 12z"
                              />
                            </svg>
                            <span className="ml-2 mt-5px flex">
                              {t('proceed_checkout')}
                            </span>
                          </Button>
                        </Link>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  )
}

export const getServerSideProps: GetServerSideProps<any> = async ({
  locale,
}) => {
  return {
    props: {
      ...(await serverSideTranslations(locale || 'en', ['common'])),
    },
  }
}

export default CartPage
