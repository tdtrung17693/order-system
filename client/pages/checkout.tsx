import { PaymentForm } from 'components/payment-form/payment-form'
import { AuthContext } from 'context/auth.context'
import { CartContext } from 'context/cart.context'
import { Decimal } from 'decimal.js'
import { OrdersCreate } from 'dto/order.dto'
import { PaymentInfo, PaymentMethod } from 'dto/payment.dto'
import { GetServerSideProps } from 'next'
import { useTranslation } from 'next-i18next'
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router'
import React, { useContext, useEffect, useMemo, useState } from 'react'
import auth from 'services/auth'
import { notification } from 'services/notification'
import { order } from 'services/order'
import { payment } from 'services/payment'
import { groupCartItemByVendor } from 'utils/common'
import { handleApiError } from 'utils/error'

const CheckoutPage: React.FC<any> = (props) => {
  const { t } = useTranslation('common')
  const cartCtx = useContext(CartContext)
  const authCtx = useContext(AuthContext)
  const router = useRouter()
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([])
  const cartItemsGroupByVendor = useMemo(
    () => groupCartItemByVendor(cartCtx.checkoutItems),
    [cartCtx.checkoutItems]
  )

  useEffect(() => {
    if (auth.initialized && !authCtx.user) {
      router.push('/auth/signin')
    }
  }, [authCtx.user, router])

  useEffect(() => {
    if (!authCtx.user) return

    payment
      .getSupportedMethods()
      .then((paymentMethods) => {
        setPaymentMethods(paymentMethods)
      })
      .catch((error) => {
        handleApiError(t, error)
      })
  }, [authCtx.user, t])

  function processCheckout(paymentInfo: PaymentInfo) {
    const groupedItemsByVendor = groupCartItemByVendor(cartCtx.checkoutItems)
    let ordersCreateRequest: OrdersCreate = {
      orders: [],
      paymentMethodId: paymentInfo.paymentMethodId,
      recipientAddress: paymentInfo.recipientAddress,
      recipientName: paymentInfo.recipientName,
      recipientPhone: paymentInfo.recipientPhone,
    }

    for (let vendor of Object.values(groupedItemsByVendor)) {
      ordersCreateRequest.orders.push({
        items: vendor.items.map((i) => ({
          productId: i.productId,
          quantity: i.quantity,
        })),
      })
    }
    return order
      .createOrders(ordersCreateRequest)
      .then(() => {
        notification.info(t('action_success'), t('order_placed'))
        router.push('/orders')
        cartCtx.refreshCart()
      })
      .catch((error) => handleApiError(t, error))
  }

  if (cartCtx.checkoutItems.length === 0) {
    return (
      <div className="p-8">
        <Head>
          <title>Order Management System | Product List</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <h1 className="text-5xl mb-4 text-center">{t('title_checkout')}</h1>
        <main className="flex flex-col justify-start items-center min-h-screen p-16">
          <div className="flex justify-start min-w-full max-w-full">
            <div className="flex justify-center my-6 min-w-full">
              {t('no_items_to_checkout')}
            </div>
          </div>
        </main>
      </div>
    )
  }

  return (
    <div className="p-8">
      <Head>
        <title>Order Management System | Product List</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className="text-5xl mb-4 text-center">{t('title_checkout')}</h1>
      <main className="flex flex-col justify-start items-center min-h-screen p-16">
        <div className="flex justify-start min-w-full max-w-full">
          <div className="flex justify-center my-6 min-w-full">
            <div className="flex flex-row w-full p-8 text-gray-800 bg-white shadow-lg pin-r pin-y md:w-4/5 lg:w-4/5">
              <div className="flex-1 pr-16">
                <div className="text-xl font-bold mb-4">
                  {t('payment_info_text')}
                </div>
                <div>
                  <PaymentForm
                    paymentMethods={paymentMethods}
                    onSubmit={processCheckout}
                  />
                </div>
              </div>
              <div className="flex-1">
                <table className="w-full text-sm lg:text-base" cellSpacing="0">
                  <thead>
                    <tr className="h-12 uppercase">
                      <th className="table-cell w-40"></th>
                      <th className="text-left">Product</th>
                      <th className="text-center">
                        <span>Quantity</span>
                      </th>
                      <th className="text-right table-cell">Unit price</th>
                      <th className="text-right">Total price</th>
                    </tr>
                  </thead>
                  <tbody>
                    {Object.values(cartItemsGroupByVendor).map((vendor) => {
                      return (
                        <>
                          <tr>
                            <td colSpan={6}>
                              <div className="bg-gray-200 px-4 py-2">
                                {vendor.vendorName}
                              </div>
                            </td>
                          </tr>
                          {vendor.items.map((item) => {
                            return (
                              <tr key={`${item.productId}-${item}`}>
                                <td className=" pb-4 table-cell">
                                  <Image
                                    src="/images/default-product-image.png"
                                    width={160}
                                    height={160}
                                    alt={item.productName}
                                  />
                                </td>
                                <td>{item.productName}</td>
                                <td className="text-center mt-6">
                                  {item.quantity}
                                </td>
                                <td className="hidden text-right md:table-cell">
                                  <span className="text-sm lg:text-base font-medium">
                                    {item.productPrice}
                                  </span>
                                </td>
                                <td className="text-right">
                                  <span className="text-sm lg:text-base font-medium">
                                    {new Decimal(item.productPrice)
                                      .times(item.quantity)
                                      .toFixed(2)}
                                  </span>
                                </td>
                              </tr>
                            )
                          })}
                        </>
                      )
                    })}
                  </tbody>
                </table>
                <div className="my-4 mt-6 -mx-2 lg:flex">
                  <div className="w-full">
                    <div className="p-4">
                      <div className="flex justify-between border-b">
                        <div className="lg:px-4 lg:py-2 m-2 text-lg lg:text-xl font-bold text-center text-gray-800">
                          {t('cart_order_total_text')}
                        </div>
                        <div className="lg:px-4 lg:py-2 m-2 lg:text-lg font-bold text-center text-gray-900">
                          {cartCtx.checkoutItems
                            .reduce(
                              (s, i) =>
                                new Decimal(i.quantity)
                                  .times(new Decimal(i.productPrice))
                                  .plus(s),
                              new Decimal(0)
                            )
                            .toFixed(2)}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  )
}

export const getServerSideProps: GetServerSideProps<any> = async ({
  locale,
}) => {
  return {
    props: {
      ...(await serverSideTranslations(locale || 'en', ['common'])),
    },
  }
}

export default CheckoutPage
