import { GetServerSideProps } from 'next'
import { useTranslation } from 'next-i18next'
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import Head from 'next/head'
import Image from 'next/image'
import React, {
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useState,
} from 'react'
import { ItemsPerPage } from '../constants/pagination'
import { buildPaginationRequest } from '../dto/pagination.dto'
import { Product } from '../dto/product.dto'
import { Add24Filled } from '@fluentui/react-icons'
import { CartContext } from 'context/cart.context'
import auth from 'services/auth'
import { AuthContext } from 'context/auth.context'
import { useRouter } from 'next/router'
import { product } from 'services/product'
import { Pagination } from 'antd'

const ProductList: React.FC<any> = (props) => {
  const { t } = useTranslation('common')
  const cartCtx = useContext(CartContext)
  const authCtx = useContext(AuthContext)
  const router = useRouter()
  const [products, setProducts] = useState<Product[]>([])
  const [pageIndex, setPageIndex] = useState(0)
  const [total, setTotal] = useState(-1)
  const totalPage = useMemo(() => Math.ceil(total / ItemsPerPage), [total])

  useEffect(() => {
    if (auth.initialized && !authCtx.user) {
      router.push('/auth/signin')
    }
  }, [authCtx.user, router])

  const fetchPage = useCallback(() => {
    product
      .getProducts(buildPaginationRequest(pageIndex, ItemsPerPage))
      .then((data) => {
        if (total == -1) {
          setTotal(data.total)
        }

        setProducts(data.items)
      })
  }, [pageIndex, total])

  useEffect(() => {
    fetchPage()
  }, [fetchPage])

  function addProductToCart(p: Product) {
    cartCtx.addCartItem({
      productId: p.id,
      quantity: 1,
    })
  }

  return (
    <div className="p-8">
      <Head>
        <title>Order Management System | Product List</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className="text-5xl mb-4 text-center">{t('title_product')}</h1>
      <main className="flex flex-col justify-start items-center min-h-screen p-16">
        <div className="flex flex-wrap justify-center min-w-full max-w-full">
          {products.length === 0 && 'No products'}
          {products.length > 0 &&
            products.map((product) => {
              return (
                <div
                  key={product.id}
                  className="flex flex-col basis-1/6 mr-4 mb-4 border border-solid border-gray-300 hover:shadow-md hover:shadow-slate-300 transition"
                >
                  <div className="p-4">
                    <div>
                      <Image
                        src="/images/default-product-image.png"
                        width={200}
                        height={200}
                        layout="responsive"
                        objectFit="cover"
                        alt={product.name}
                      />
                    </div>
                    <div>{product.name}</div>
                    <div>${product.productPrice}</div>
                  </div>
                  <a
                    className="flex justify-center items-center py-2 px-4 bg-blue-500 hover:bg-blue-600 text-white transition"
                    onClick={() => addProductToCart(product)}
                  >
                    <span className="flex mr-2">
                      <Add24Filled />
                    </span>
                    <span>{t('add_to_cart')}</span>
                  </a>
                </div>
              )
            })}
        </div>

        <div className="flex flex-wrap justify-center min-w-full max-w-full">
          <Pagination
            current={pageIndex + 1}
            total={total}
            pageSize={ItemsPerPage}
            hideOnSinglePage={true}
            defaultPageSize={ItemsPerPage}
            showSizeChanger={false}
            onChange={(page, _) => setPageIndex(page - 1)}
          />
        </div>
      </main>
    </div>
  )
}

export const getServerSideProps: GetServerSideProps<any> = async ({
  locale,
}) => {
  return {
    props: {
      ...(await serverSideTranslations(locale || 'en', ['common'])),
    },
  }
}

export default ProductList
