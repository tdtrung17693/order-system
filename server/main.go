package main

import (
	"fmt"
	"net/http"
	"order-system/config"
	"order-system/database"
	"order-system/handlers"
	"order-system/handlers/dto"

	"github.com/asaskevich/govalidator"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/shopspring/decimal"

	echoSwagger "github.com/swaggo/echo-swagger"

	_ "order-system/docs" // docs is generated by Swag CLI, you have to import it.
)

type GoValidatorAdapter struct {
}

func (v *GoValidatorAdapter) Validate(i interface{}) error {
	if _, err := govalidator.ValidateStruct(i); err != nil {
		return err
	}
	return nil
}

func bootstrap() *echo.Echo {
	// chores
	config.LoadConfig()
	database.InitDB()
	// allow decimal.Decimal value to be a number in the marshalled JSON
	// because these values only use for displaying, so no need to worry about the precison
	decimal.MarshalJSONWithoutQuotes = true
	e := echo.New()

	e.Validator = &GoValidatorAdapter{}
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	protectedApiGroup := e.Group("/api")

	jwtConfig := middleware.JWTConfig{
		Claims:     &dto.JwtCustomClaims{},
		SigningKey: []byte(config.GetConfig().JwtSecretKey),
	}

	protectedApiGroup.Use(middleware.JWTWithConfig(jwtConfig))
	handlers.PrivateEndpoints(protectedApiGroup)

	e.GET("/", func(c echo.Context) error {
		return c.JSON(http.StatusOK, "OK")
	})
	handlers.PublicEndpoints(e.Group("/api"))

	currentConfig := config.GetConfig()
	if currentConfig.AppEnv == config.AppEnvDevelopment {
		e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
			AllowOrigins:     []string{"*"},
			AllowMethods:     []string{"*"},
			AllowCredentials: true,
		}))
	} else {
		e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
			AllowOrigins:     []string{currentConfig.AppURL},
			AllowMethods:     []string{"*"},
			AllowCredentials: true,
		}))
	}
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	return e
}

// @title Order System

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @BasePath /
func main() {
	app := bootstrap()
	config := config.GetConfig()
	app.Logger.Fatal(app.Start(fmt.Sprintf(":%s", config.AppPort)))
}
